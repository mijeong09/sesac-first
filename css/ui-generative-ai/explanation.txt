# StudyTrack 페이지 구조 설명서

안녕하세요! 이 문서는 `index.html`과 `style.css` 파일이 어떻게 구성되어 있고, 서로 어떻게 작동하여 웹 페이지를 만드는지 설명하기 위해 작성되었습니다.

## 1. 파일 구성

- **`index.html`**: 웹 페이지의 뼈대와 콘텐츠를 담고 있는 파일입니다. 어떤 내용이 어디에 위치할지 구조를 정의합니다.
- **`style.css`**: 웹 페이지의 디자인을 담당하는 파일입니다. 색상, 글자 크기, 레이아웃 등 시각적인 부분을 모두 정의합니다.
- **`screen.png`**: 우리가 만들고자 하는 목표 디자인 이미지입니다.
- **`explanation.txt`**: 바로 지금 읽고 계신 이 파일입니다. :)

## 2. HTML 구조 (`index.html`)

HTML 파일은 단순히 콘텐츠를 나열하는 것을 넘어, **시맨틱(Semantic) 태그**를 사용하여 각 부분이 어떤 의미를 갖는지 명확하게 표현했습니다. 이렇게 하면 컴퓨터(검색엔진, 스크린리더 등)가 내용을 더 잘 이해할 수 있습니다.

- **`<div class="dashboard-container">`**: 페이지 전체를 감싸는 가장 큰 상자입니다. 이 상자 안에 왼쪽 사이드바와 오른쪽 메인 콘텐츠, 두 개의 큰 영역이 들어갑니다.

- **`<aside class="sidebar">`**: 왼쪽 사이드바 영역입니다. `<aside>` 태그는 문서의 주요 내용과 직접적인 관련이 적은 부가적인 콘텐츠(여기서는 메뉴)를 담을 때 사용합니다.
  - **`<nav>`**: `<aside>` 안에는 `<nav>`(네비게이션) 태그를 사용해서 다른 페이지로 이동할 수 있는 메뉴 링크들을 그룹화했습니다.

- **`<main class="main-content">`**: 오른쪽 메인 콘텐츠 영역입니다. `<main>` 태그는 이 페이지의 핵심적인 내용이 들어가는 부분임을 의미합니다.
  - **`<header>`**: 메인 콘텐츠 상단의 제목, 검색창이 있는 영역입니다. `position: sticky` 속성을 적용하여 스크롤을 내려도 항상 상단에 고정되도록 만들었습니다.
  - **`<section>`**: 'Learning Records'라는 제목과 테이블 등 연관 있는 내용들을 하나의 그룹으로 묶기 위해 사용했습니다.
  - **`<table>`**: 학습 기록처럼 행과 열로 구성된 데이터를 표현하기에 가장 적합한 태그입니다.
  - **`<footer>`**: `<section>`의 가장 아랫부분으로, 여기서는 페이지 번호를 표시하는 용도로 사용했습니다.

## 3. CSS 스타일 및 레이아웃 (`style.css`)

CSS 파일은 주석을 통해 크게 **기본 스타일, 레이아웃, 사이드바, 메인 콘텐츠, 컴포넌트** 등으로 구조를 나누어 이해하기 쉽도록 작성했습니다.

### 핵심 레이아웃 기법: Flexbox

이 페이지 레이아웃의 핵심은 **Flexbox**입니다. `.dashboard-container`에 `display: flex;` 속성을 적용하여 자식 요소인 `.sidebar`와 `.main-content`를 손쉽게 가로로 배치했습니다. Flexbox는 복잡한 계산 없이도 요소들을 정렬하고 공간을 나눌 수 있게 해주는 매우 강력하고 편리한 도구입니다.

### 클래스 이름 규칙

`sidebar-profile`, `records-table`처럼 `블록__요소` 형태로 클래스 이름을 지었습니다. 이는 BEM(Block, Element, Modifier)이라는 유명한 CSS 방법론을 간소화한 것으로, 클래스 이름만 봐도 '어떤 블록(section)에 속한 어떤 요소(element)'인지 쉽게 파악할 수 있게 도와줍니다.

## 4. 페이지 확인 방법

`index.html` 파일을 더블클릭하거나, 웹 브라우저(Chrome, Edge 등)로 파일을 열면 완성된 페이지를 직접 확인해 보실 수 있습니다.